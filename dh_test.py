from DH_algo import DH_algo

BITS = 16    # instead of 32
dh = DH_algo()
dh.generate_p()
dh.generate_g()
x = dh.generate_private_key(BITS)
print(f"Bob's private key : {x}")
y = dh.generate_private_key(BITS)
print(f"Alice's private key : {y}")
z = dh.generate_private_key(BITS)
print(f"Ron's private key : {z}")
X = dh.get_my_public(x)
print(f"Bob's public key : {X}       --> send to Alice")
Y = dh.get_my_public(y)
print(f"Alice's public key : {Y}     --> send to Ron")
Z = dh.get_my_public(z)
print(f"Ron's public key : {Z}       --> send to Bob")
x_y = dh.get_mutual_K(X, y)
print(f"Bob-Alice mutual key : {x_y}, At Alice --> send to Ron")
y_z = dh.get_mutual_K(Y, z)
print(f"Alice-Ron mutual key : {y_z}, At Ron   --> send to Bob")
z_x = dh.get_mutual_K(Z, x)
print(f"Ron-Bob mutual key : {z_x}, At Bob     --> send to Alice")
K_y = dh.get_mutual_K(z_x, y)
print(f"mutual key : {K_y}, At Alice")
K_z = dh.get_mutual_K(x_y, z)
print(f"mutual key : {K_z}, At Ron")
K_x = dh.get_mutual_K(y_z , x)
print(f"mutual key : {K_x}, At Bob")
print(f"K_x == K_y :{K_x == K_y}")
print(f"K_x == K_z :{K_x == K_z}")
